# Four automatically controlled PWM fan outputs (J4-J7), each set by four target temperatures, maintained by four Dallas sensor's temperatures. MQTT enabled. Home Assistant API disabled. DHCP enabled.
# Other control configurations available with modification of Dallas platform LAMBDA function. Contact us at esp32andmore@gmail.com for no cost customization.

substitutions:
  devicename: coolboxx2
  fdevicename: Coolboxx2
  ip: 192.168.0.203 # For static IP adressing
  defaultrpm: '6000'
  defaultscale: '60'

  ssid: !secret wifi_ssid
  password: !secret wifi_password

  alarm_temp: "50" # Threshold for alarm when implemented
  ptemp: "20"
  itemp: "0.25"
  decay: "1.0"
  max_error: "100"
  aht_offest: "-6.0"


# Connect your Dallas sensors with logger: DEBUG enabled (factory flash default).
# Open the ESPHome webtool, connect to the ECB board, view the "Logs" window, hit "Reset",
# and search for Dallas scan addresses and replace the below addresses with your unique ones.
# Example Scan
#[18:16:42][D][dallas.sensor:084]:     0x8b3ca8f64935b228 4
#[18:16:42][D][dallas.sensor:084]:     0x783c0af6490d3628 2
#[18:16:42][D][dallas.sensor:084]:     0xc13c01f09642c928 1
#[18:16:42][D][dallas.sensor:084]:     0x043c6ef649772f28 3
  dallasaddress1: "0xc13c01f09642c928"
  dallasaddress2: "0x783c0af6490d3628"
  dallasaddress3: "0x043c6ef649772f28"
  dallasaddress4: "0x8b3ca8f64935b228"


esphome:
  name: ${devicename}
  friendly_name: ${fdevicename}
  #name_add_mac_suffix: true

  on_boot:
  - priority: 900.0
    then:
      - lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz();


esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

preferences:
  flash_write_interval: 10min
    
wifi:
  ssid: ${ssid}
  password: ${password}
  fast_connect: false
#  example static IP settings
#  manual_ip:
#    static_ip: ${ip}
#    gateway: 192.168.0.1
#    subnet: 255.255.255.0
#    dns1: 192.168.0.1
#    dns2: 8.8.8.8
  reboot_timeout: 0s

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${fdevicename} Fallback Hotspot
    password: "esphome1" #${password}
    manual_ip:
      static_ip: 192.168.100.2
      gateway: 192.168.100.2
      subnet: 255.255.255.0

    
captive_portal:

ota:
  password: "esphome1"
# Replace with your Wifi credentials here

#mqtt:
  #id: mqtt_client
  #broker: test.esp32andmore.com  # use your own MQTT server address and credentials
  #username: "john"
  #password: "trek6666"
  #reboot_timeout: 0s
#  discovery_unique_id_generator: "mac"
 

api:
  encryption:
    key: "itqzvhZMJj8wuTJX0GTOuL/ffESFROzUlmcO0u2+sfo="  #use your own HA generated Key
  reboot_timeout: 0s
  
web_server:
  port: 80
  local: true

time:
  - platform: sntp
    id: current_time

debug:
  update_interval: 5s

logger:
  level: ERROR
  #baud_rate: 0
#  hardware_uart: UART2

#  deassert_rts_dtr: TRUE
#uart:
  #- id: UART_0
    #tx_pin: GPIO01
    #rx_pin: GPIO03
    #baud_rate: 9600

globals:
  - id: mqtt_name
    type: std::string
    restore_value: yes
    max_restore_data_length: 24
    initial_value: ''
  - id: watchdog_counter
    type: int
    initial_value: '12'
  - id: watchdog_G
    type: int
    initial_value: '0'
   
  - id: fan1_sum
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: fan2_sum
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: fan3_sum
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: fan4_sum
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: fan1_max
    type: float
    restore_value: yes
    initial_value: ${defaultrpm}
  - id: fan2_max
    type: float
    restore_value: yes
    initial_value: ${defaultrpm}
  - id: fan3_max
    type: float
    restore_value: yes
    initial_value: ${defaultrpm}
  - id: fan4_max
    type: float
    restore_value: yes
    initial_value: ${defaultrpm}

  - id: fan1_scale
    type: float
    restore_value: yes
    initial_value: ${defaultscale}
  - id: fan2_scale
    type: float
    restore_value: yes
    initial_value: ${defaultscale}
  - id: fan3_scale
    type: float
    restore_value: yes
    initial_value: ${defaultscale}
  - id: fan4_scale
    type: float
    restore_value: yes
    initial_value: ${defaultscale}

  - id: old_manual_fan_speed_int
    type: int
    restore_value: no
    initial_value: '0'


  - id: target1
    type: int
    restore_value: True
    initial_value: '26'
  - id: target2
    type: int
    restore_value: True
    initial_value: '26'
  - id: target3
    type: int
    restore_value: True
    initial_value: '26'
  - id: target4
    type: int
    restore_value: True
    initial_value: '26'

  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

number:  
  - platform: template
    id: set_target_temp_1
    name: ${fdevicename} Target Temp 1
    optimistic: True
    min_value: 15
    max_value: 50
    initial_value: '26'
    step: 1
    restore_value: True
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    #command_topic: ${devicename}/number/${devicename}_target_temp_1/command  #add for MQTT

  - platform: template
    id: set_target_temp_2
    name: ${fdevicename} Target Temp 2
    optimistic: True
    min_value: 15
    max_value: 50
    initial_value: '26'
    step: 1
    restore_value: true
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    #command_topic: ${devicename}/number/${devicename}_target_temp_2/command  #add for MQTT

  - platform: template
    id: set_target_temp_3
    name: ${fdevicename} Target Temp 3
    optimistic: True
    min_value: 15
    max_value: 50
    initial_value: '26'
    step: 1
    restore_value: true
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    #command_topic: ${devicename}/number/${devicename}_target_temp_3/command  #add for MQTT
    
  - platform: template
    id: set_target_temp_4
    name: ${fdevicename} Target Temp 4
    optimistic: True
    min_value: 15
    max_value: 50
    initial_value: '26'
    step: 1
    restore_value: true
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    #command_topic: ${devicename}/number/${devicename}_target_temp_4/command  #add for MQTT

  - platform: template
    id: set_alarm_temp
    name: ${fdevicename} Alarm Temp
    optimistic: True
    min_value: 15
    max_value: 80
    initial_value: ${alarm_temp}
    step: 1
    restore_value: true
    unit_of_measurement: °C
    device_class: "TEMPERATURE"


  - platform: template
    id: ptemp_var
    name: ${fdevicename} PTEMP
    optimistic: True
    min_value: 1
    max_value: 50
    initial_value: ${ptemp}
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "NONE"
    #command_topic: ${devicename}/number/${devicename}_ptemp/command  #add for MQTT

  - platform: template
    id: itemp_var
    name: ${fdevicename} ITEMP
    optimistic: True
    min_value: 0.01
    max_value: 1.00
    initial_value: ${itemp}
    step: 0.01
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "none"
    #command_topic: ${devicename}/number/${devicename}_itemp/command  #add for MQTT

  - platform: template
    id: decay_factor
    name: ${fdevicename} Decay Factor
    optimistic: True
    min_value: 0.1
    max_value: 10.0
    initial_value: ${decay}
    step: 0.1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "none"
    #command_topic: ${devicename}/number/${devicename}_decay_factor/command  #add for MQTT

  - platform: template
    id: max_error
    name: ${fdevicename} Max Error
    optimistic: True
    min_value: 50
    max_value: 250
    initial_value: ${max_error}
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "none"
    #command_topic: ${devicename}/number/${devicename}_decay_factor/command  #add for MQTT

  
switch:

  - platform: restart
    name: ${fdevicename} Restart
  
  - platform: template
    id: cal_fans
    name: ${fdevicename} Calibrate Fans
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - fan.turn_on:
          id: fan1_speed
          speed: 100
      - fan.turn_on:
          id: fan2_speed
          speed: 100
      - fan.turn_on:
          id: fan3_speed
          speed: 100
      - fan.turn_on:
          id: fan4_speed
          speed: 100
      - delay: 20s
      - lambda: |- 
            if (id(rpm1).state > 10) {
              id(fan1_max) = id(rpm1).state;
              id(fan1_scale) = id(fan1_max)/100;
            }
            if (id(rpm2).state > 10) {
              id(fan2_max) = id(rpm2).state;
              id(fan2_scale) = id(fan2_max)/100;
            }
            if (id(rpm3).state > 10) {
              id(fan3_max) = id(rpm3).state;
              id(fan3_scale) = id(fan3_max)/100;
            }
            if (id(rpm4).state > 10) {
              id(fan4_max) = id(rpm4).state;
              id(fan4_scale) = id(fan4_max)/100;
            }
            ESP_LOGE("custom", "*********Calibrate Fans Turning off**********");
            ESP_LOGE("custom", "MAx FAN SPEED: Fan1 %.1f, Fan2 %.1f, Fan3 %.1f, Fan4 %.1f", id(fan1_max), id(fan2_max), id(fan3_max), id(fan4_max));
      - delay: 1s
      - fan.turn_off:
          id: fan1_speed
      - fan.turn_off:
          id: fan2_speed
      - fan.turn_off:
          id: fan3_speed
      - fan.turn_off:
          id: fan4_speed
      - switch.turn_off:
          id: cal_fans

  - platform: gpio
    id: hive_watchdog
    name: ${fdevicename} Watchdog
    restore_mode: ALWAYS_ON
    pin:
      number: 26
      mode:
        output: true
        pullup: true
        

#  - platform: gpio
#    name: ${fdevicename} Relay 0
#    pin: GPIO16
#    id: AVfan1_Relay_0
#    restore_mode: restore_default_off

  - platform: template
    id: auto_fan1
    name: ${fdevicename} Fan1 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true      
    turn_off_action:
      - fan.turn_off : fan1_speed

  - platform: template
    id: auto_fan2
    name: ${fdevicename} Fan2 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true    
    turn_off_action:
      - fan.turn_off : fan2_speed

  - platform: template
    id: auto_fan3
    name: ${fdevicename} Fan3 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true  
    turn_off_action:
      - fan.turn_off : fan3_speed

  - platform: template
    id: auto_fan4
    name: ${fdevicename} Fan4 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True  
    turn_off_action:
      - fan.turn_off : fan4_speed
  
dallas:
  - pin: GPIO27
    update_interval: 5s
  
output:
  - platform: ledc
    pin: GPIO13
    id: fan1
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO14
    id: fan2
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO25
    id: fan3
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO32
    id: fan4
    frequency: 25600Hz

  - platform: ledc
    pin:
      number: GPIO2
      ignore_strapping_warning: true
      #allow_other_uses: true
    id: gpio_02

 
light:
  # On-Board LED
#  - platform: status_led
    #name: ${fdevicename} Status Light
#    id: status_light
#    pin:
#      number: GPIO2
#      ignore_strapping_warning: true
#      allow_other_uses: true

  - platform: monochromatic
    id: alarm_light
    output: gpio_02
    name: ${fdevicename} Alarm Light
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%



#font:
#  - file: "fonts/comic-sans-ms/ComicSansMS3.ttf"
#    id: my_font
#    size: 12

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: false
  - id: bus_b
    sda: GPIO16
    scl: GPIO17
    scan: False
    frequency: 800khz


#display:
#  - platform: ssd1306_i2c
#    i2c_id: bus_a
#    address: 0x3D
#    model: "SSD1306 128x64"
#    id: my_display
#    pages:
#      - id: page1
#        lambda: |-
#          it.print(0, 0, id(my_font), "ESP32 Control Board");

text_sensor:                 
  - platform: template
    name: ${fdevicename} Device Sensor
    lambda: |-
      return {"Coolboxx II Board"};

  - platform: version
    name: ${fdevicename} Version

  - platform: wifi_info
    ip_address:
      name: ${fdevicename} IP Address
    ssid:
      name: ${fdevicename} Connected SSID
    bssid:
      name: ${fdevicename} Connected BSSID
    mac_address:
      name: ${fdevicename} Mac Wifi Address

  - platform: debug
 #   device:
 #     name: ${fdevicename} Device Info
    reset_reason:
      name: ${fdevicename} Reset Reason

sensor:
  - platform: template
    name: ${fdevicename} Hive Watchdog
    id: hive_wd_count

  - platform: pulse_counter
    pin: GPIO33
    id: rpm1
    unit_of_measurement: 'rpm'
    name: ${fdevicename} Mon 1
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO34
    id: rpm2
    unit_of_measurement: 'rpm'
    name: ${fdevicename} Mon 2
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO35
    id: rpm3
    unit_of_measurement: 'rpm'
    name: ${fdevicename} Mon 3
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO39
    id: rpm4
    unit_of_measurement: 'rpm'
    name: ${fdevicename} Mon 4
    update_interval: 5s
    filters:
      - multiply: 0.5       
        
  - platform: wifi_signal
    name: ${fdevicename} WiFi
    update_interval: 30s
  
  - platform: uptime
    name: ${fdevicename} Uptime
    id: up_time
    update_interval: 30s

  - platform: template
    name: ${fdevicename} CPU Speed
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"

  - platform: template
    id: sys_esp_temperature
    name: ${fdevicename} ESP Temperature
    lambda: return temperatureRead();
    unit_of_measurement: °C
    device_class: TEMPERATURE
    update_interval: 30s

  - platform: aht10
    i2c_id: bus_b
    address: 0x38
    variant: AHT20
    update_interval: 5s
    humidity:
      name: ${fdevicename} Onboard Humidity
    temperature:
      id: temp0
      name: ${fdevicename} Onboard Temperature
      filters:
      - filter_out: NaN
      - offset: -6.0
      on_value:
        - if: 
            condition:
              for:
                time: 10s
                condition:
                  lambda: 'return id(temp0).state >= id(set_alarm_temp).state;'
            then: 
              - light.turn_on:
                  id: alarm_light
                  effect: 'Fast Pulse'
              - lambda: !lambda |-
                 id(alarm_sen).publish_state(true);
            else: 
              - light.turn_off:
                  id: alarm_light
              - lambda: !lambda |-
                  id(alarm_sen).publish_state(false);
        - lambda: !lambda |  
              float fan_actual_temp1 =  id(temp0).state;
              float fan_actual_temp2 =  id(temp0).state;
              float fan_actual_temp3 =  id(temp0).state;
              float fan_actual_temp4 =  id(temp0).state;
              if (id(auto_fan1).state) {
                float fan_desired_temp1 = id(set_target_temp_1).state;
                float diff1 = fan_actual_temp1 - fan_desired_temp1;
                if (diff1 < 0) diff1 = diff1/id(decay_factor).state;
                id(fan1_sum) = id(fan1_sum) + diff1;
                float fan_pdiff1 = diff1 * id(ptemp_var).state;
                float fan_idiff1 = id(fan1_sum) * id(itemp_var).state;
                int fan_set_speed1 = round(fan_pdiff1 + fan_idiff1);
                if (fan_set_speed1 >100) fan_set_speed1 = 100;
                if (fan_set_speed1 <10) fan_set_speed1 = 1;
                if (id(fan1_sum) >id(max_error).state) id(fan1_sum) = id(max_error).state;
                if (id(fan1_sum) < -100.0) id(fan1_sum) = -100.0;

                auto call1 = id(fan1_speed).turn_on();
                call1.set_speed(fan_set_speed1);
                call1.perform();
              }

              if (id(auto_fan2).state) {
                float fan_desired_temp2 = id(set_target_temp_2).state;
                float diff2 = fan_actual_temp2 - fan_desired_temp2;
                if (diff2 < 0) diff2 = diff2/id(decay_factor).state;
                id(fan2_sum) = id(fan2_sum) + diff2;
                float fan_pdiff2 = diff2 * id(ptemp_var).state;
                float fan_idiff2 = id(fan2_sum) * id(itemp_var).state;
                int fan_set_speed2 = round(fan_pdiff2 + fan_idiff2);
                if (fan_set_speed2 >100) fan_set_speed2 = 100;
                if (fan_set_speed2 <10) fan_set_speed2 = 1;
                if (id(fan2_sum) >id(max_error).state) id(fan2_sum) = id(max_error).state;
                if (id(fan2_sum) < -100.0) id(fan2_sum) = -100.0;

                auto call2 = id(fan2_speed).turn_on();
                call2.set_speed(fan_set_speed2);
                call2.perform();
              }

              if (id(auto_fan3).state) {
                float fan_desired_temp3 = id(set_target_temp_3).state;
                float diff3 = fan_actual_temp3 - fan_desired_temp3;
                if (diff3 < 0) diff3 = diff3/id(decay_factor).state;
                id(fan3_sum) = id(fan3_sum) + diff3;
                float fan_pdiff3 = diff3 * id(ptemp_var).state;
                float fan_idiff3 = id(fan3_sum) * id(itemp_var).state;;
                int fan_set_speed3 = round(fan_pdiff3 + fan_idiff3);
                if (fan_set_speed3 >100) fan_set_speed3 = 100;
                if (fan_set_speed3 <10) fan_set_speed3 = 1;
                if (id(fan3_sum) >id(max_error).state) id(fan3_sum) = id(max_error).state;
                if (id(fan3_sum) < -100.0) id(fan3_sum) = -100.0;

                auto call3 = id(fan3_speed).turn_on();
                call3.set_speed(fan_set_speed3);
                call3.perform();
              }

              if (id(auto_fan4).state) {
                float fan_desired_temp4 = id(set_target_temp_4).state;
                float diff4 = fan_actual_temp4 - fan_desired_temp4;
                if (diff4 < 0) diff4 = diff4/id(decay_factor).state;
                id(fan4_sum) = id(fan4_sum) + diff4;
                float fan_pdiff4 = diff4 * id(ptemp_var).state;
                float fan_idiff4 = id(fan4_sum) * id(itemp_var).state;
                int fan_set_speed4 = round (fan_pdiff4 + fan_idiff4);
                if (fan_set_speed4 >100) fan_set_speed4 = 100;
                if (fan_set_speed4 <10) fan_set_speed4 = 1;
                if (id(fan4_sum) >id(max_error).state) id(fan4_sum) = id(max_error).state;
                if (id(fan4_sum) < -100.0) id(fan4_sum) = -100.0;

                auto call4 = id(fan4_speed).turn_on();
                call4.set_speed(fan_set_speed4);
                call4.perform();
              }

  - platform: dallas
    #address: ${dallasaddress1}
    index: 0
    id: temp1
    filters:
      - filter_out: NaN
      - offset: 0.0
      #- lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°C"
    name: ${fdevicename} Temperature 1


  - platform: dallas
    #address: ${dallasaddress2}
    index: 1
    id: temp2
    filters:
      - filter_out: NaN
      - offset: 0.0    #Calibration
    unit_of_measurement: "°C"
    name: ${fdevicename} Temperature 2
 

  - platform: dallas
    #address: ${dallasaddress3}
    index: 2
    id: temp3
    filters:
      - filter_out: NaN
      - offset: 0.0   #Calibration
    unit_of_measurement: "°C"
    name: ${fdevicename} Temperature 3


  - platform: dallas
    #address: ${dallasaddress4}
    index: 3
    id: temp4
    filters:
      - filter_out: NaN
      - offset: 0.0   #Calibration
    unit_of_measurement: "°C"
    name: ${fdevicename} Temperature 4


  - platform: debug
    free:
      name: ${fdevicename} Heap Free
    block:
      name: ${fdevicename} Heap Max Block
    loop_time:
      name: ${fdevicename} Loop Time


fan:
  - platform: speed
    output: fan1
    id: fan1_speed
    name: ${fdevicename} Fan1 Speed
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: speed
    output: fan2
    id: fan2_speed
    name: ${fdevicename} Fan2 Speed
    restore_mode: RESTORE_DEFAULT_OFF
          
  - platform: speed
    output: fan3
    id: fan3_speed
    name: ${fdevicename} Fan3 Speed
    restore_mode: RESTORE_DEFAULT_OFF
 
  - platform: speed
    output: fan4
    id: fan4_speed
    name: ${fdevicename} Fan4 Speed
    restore_mode: RESTORE_DEFAULT_OFF
  
binary_sensor:
  - platform: status
    name: ${fdevicename} Status
  - platform: template
    id: alarm_sen
    name: ${fdevicename} Alarm
    icon: mdi:fire
  